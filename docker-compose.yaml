version: '3.7'
services:

  proxy:
    hostname: proxy
    image: doctress/spiritmight:latest
    environment:
      - ENVIRONMENT=riot_api_proxy
      - DELAY=1
      - DEBUG=False
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_KEY=${API_KEY}
      - INTERNAL_DELAY=1
    ports:
      - "8888:8888"
    depends_on:
      - redis

  redis:
    hostname: redis
    image: redis:7.0-rc
    restart: always

  league_ranking:
    hostname: league_ranking
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: league_ranking
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "OUTPUT=default"
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run league_ranking"
    restart: always

  puuid_collector:
    hostname: puuid_collector
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: puuid_collector
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "OUTPUT=default"
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run puuid_collector"
    restart: always

  match_history:
    hostname: match_history
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_history
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "OUTPUT=default"
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run match_history"
    restart: always

  match_details:
    hostname: match_details
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_details
    entrypoint: "poetry run lightshield run match_details"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
      - type: bind
        source: /mnt/g/data
        target: /data
    restart: always


  #match_details:
  #  hostname: match_details
  #  build:
  #    dockerfile: Dockerfile
  #    context: services/match_details
  #  image: lightshield/match_details:${TAG}
  #  volumes:
  #    - type: bind
  #      source: ./match_data
  #      target: /data
  #  restart: always
#
  #match_timeline:
  #  hostname: match_timeline
  #  build:
  #    dockerfile: Dockerfile
  #    context: services/match_timeline
  #  image: lightshield/match_timeline:${TAG}
  #  volumes:
  #    - type: bind
  #      source: ./match_data
  #      target: /project/data
  #  restart: always

networks:
  default:
    name: lightshield
    external: true
