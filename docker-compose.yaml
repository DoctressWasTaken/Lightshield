version: '3.7'
services:

  proxy:
    hostname: proxy
    image: doctress/spiritmight
    environment:
      - ENVIRONMENT=riot_api_proxy
      - DELAY=1
      - DEBUG=False
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_KEY=${API_KEY}
    ports:
      - "8888:8888"

  redis:
    hostname: redis
    image: redis:7.0-rc
    restart: always

  league_ranking:
    hostname: league_ranking
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: league_ranking
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "OUTPUT=default"
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run league_ranking"
    restart: always

  summoner_id:
    hostname: summoner_id
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: summoner_id
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "OUTPUT=default"
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run summoner_id"
    restart: always
    #image: lightshield/summoner_id:${TAG}



  ### Storage
  #redis:
  #  hostname: redis
  #  build:
  #    dockerfile: Dockerfile
  #    context: redis
  #  image: lightshield/redis:${TAG}
  #  restart: always
  #  volumes:
  #    - redis_data:/data
  #  ports:
  #    - 127.0.0.1:6379:6379
#
  #postgres:
  #  hostname: postgres
  #  build:
  #    dockerfile: Dockerfile
  #    context: postgres
  #  image: lightshield/postgres:${TAG}
  #  restart: always
  #  ports:
  #    - 127.0.0.1:8303:5432
  #  environment:
  #    - "POSTGRES_HOST_AUTH_METHOD=trust"
  #  volumes:
  #    - postgres_data:/var/lib/postgresql/data
  #  stop_grace_period: 60s


  #match_history:
  #  hostname: match_history
  #  build:
  #    dockerfile: Dockerfile
  #    context: services/match_history
#
  #match_details:
  #  hostname: match_details
  #  build:
  #    dockerfile: Dockerfile
  #    context: services/match_details
  #  image: lightshield/match_details:${TAG}
  #  volumes:
  #    - type: bind
  #      source: ./match_data
  #      target: /data
  #  restart: always
#
  #match_timeline:
  #  hostname: match_timeline
  #  build:
  #    dockerfile: Dockerfile
  #    context: services/match_timeline
  #  image: lightshield/match_timeline:${TAG}
  #  volumes:
  #    - type: bind
  #      source: ./match_data
  #      target: /project/data
  #  restart: always

networks:
  default:
    name: lightshield
    external: true
