version: '3.7'
services:

  proxy:
    hostname: proxy
    image: doctress/spiritmight:dev
    environment:
      - ENVIRONMENT=rgapi
      - EXTRA_LENGTH=0.5
      - DEBUG=False
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_KEY=${API_KEY}
      - INTERNAL_DELAY=0
    ports:
      - "127.0.0.1:8888:8888"
    depends_on:
      - redis
    profiles:
      - all
      - peripheral
  rabbitmq:
    hostname: rabbitmq
    image: docker.io/bitnami/rabbitmq:3.10
    ports:
      - '127.0.0.1:5672:5672'
      - '127.0.0.1:15672:15672'
    environment:
      - RABBITMQ_LOGS=-
    volumes:
      - 'rabbitmq_data:/bitnami/rabbitmq/mnesia'
    profiles:
      - all
      - peripheral
  redis:
    hostname: redis
    image: redis:7.0-rc
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    profiles:
      - all
      - peripheral

  tracker:
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: tracker
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run tracker"
    restart: always
    profiles:
      - peripheral
      - all


  league_ranking:
    hostname: league_ranking
    image: doctress/lightshield/league_ranking:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: league_ranking
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run league_ranking"
    restart: always
    profiles:
      - league_ranking
      - all

### PUUID Collector

  puuid_collector:
    image: doctress/lightshield/puuid_collector:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: puuid_collector
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run puuid_collector"
    restart: always
    profiles:
      - puuid_collector
      - all

  puuid_collector_tasks:
    image: doctress/lightshield/puuid_collector_tasks:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: puuid_collector
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run puuid_collector.rabbitmq.tasks"
    restart: always
    profiles:
      - puuid_collector
      - all

  puuid_collector_results:
    image: doctress/lightshield/puuid_collector_results:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: puuid_collector
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run puuid_collector.rabbitmq.results"
    restart: always
    profiles:
      - puuid_collector
      - all

### Match History

  match_history:
    image: doctress/lightshield/match_history:${TAG}
    hostname: match_history
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_history
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run match_history"
    restart: always
    profiles:
      - match_history
      - all

  match_history_tasks:
    image: doctress/lightshield/match_history_tasks:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_history
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run match_history.rabbitmq.tasks"
    restart: always
    profiles:
      - match_history
      - all

  match_history_results:
    image: doctress/lightshield/match_history_results:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_history
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    entrypoint: "poetry run lightshield run match_history.rabbitmq.results"
    restart: always
    profiles:
      - match_history
      - all

### Match Details

  match_details:
    image: doctress/lightshield/match_details:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_details
    entrypoint: "poetry run lightshield run match_details"
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
      - type: bind
        source: ${DETAILS_LOCATION:-./data}
        target: /data
    restart: always
    profiles:
      - match_details
      - all

  match_details_tasks:
    image: doctress/lightshield/match_details_tasks:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_details
    entrypoint: "poetry run lightshield run match_details.rabbitmq.tasks"
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    restart: always
    profiles:
      - match_details
      - all

  match_details_results:
    image: doctress/lightshield/match_details_results:${TAG}
    build:
      dockerfile: Service_Dockerfile
      context: .
      args:
        service: match_details
    entrypoint: "poetry run lightshield run match_details.rabbitmq.results"
    environment:
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CRATE_PASSWORD=${CRATE_PASSWORD}
    volumes:
      - ./config_in_docker.yaml:/project/config.yaml:ro
    restart: always
    profiles:
      - match_details
      - all


volumes:
  rabbitmq_data:
    driver: local

networks:
  default:
    name: lightshield
